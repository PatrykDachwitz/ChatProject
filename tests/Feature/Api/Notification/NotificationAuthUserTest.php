<?php

namespace Tests\Feature\Api\Notification;

use App\Models\notification;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class NotificationAuthUserTest extends NotificationDefaultParametr
{

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Sanctum::actingAs(User::factory()->create([
            'id' => 40
        ]), ['*']);
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */

    /*
     *
     * create dobre dane
     * create złe dane
     * index Czy otrzymuje odpowiednie wiadomosći
     * create dobre i złe dane nie moimi danymi
     * udpate dobre i złe dane nie moimi danymi
     * delete mój i nie mój
     */

    public function testIndex()
    {
        notification::factory()->count(3)->create([
            'recipient_id' => 40
        ]);
        notification::factory()->count(3)->create([
            'recipient_id' => 2
        ]);
        $response = $this->get(route('api.notifications.index'));

        $notificationsCorrectRecipient = $this->verificationRecipient(40, $response->json());

        $this->assertTrue($notificationsCorrectRecipient);
        $this->assertCount(3, $response->json());
        $response->assertStatus(200)
            ->assertJsonStructure([$this->expectedKeys]);
    }

    public function testFindMyNotification() {

        notification::factory()->create([
            'id' => 4,
            'recipient_id' => 40
        ]);

        $response = $this->get(route('api.notifications.show', [
            'id' => 4
        ]));

        $response->assertStatus(200)
            ->assertJsonStructure($this->expectedKeys);
    }

    public function testFindNotMyNotification() {

        notification::factory()->create([
            'id' => 4,
            'recipient_id' => 39
        ]);

        $response = $this->get(route('api.notifications.show', [
            'id' => 4
        ]));

        $response->assertStatus(403);
    }

    public function testCreateCorrectData() {
        $response = $this->post(route('api.notifications.store'), $this->correctData);

        $this->assertDatabaseHas('notifications', array_merge($this->correctData, [
            'sender_id' => 40
        ]));

        $response->assertSessionHasNoErrors()
            ->assertStatus(200)
            ->assertJsonStructure($this->expectedKeys);
    }

    public function testCreateErrorData() {
        $response = $this->post(route('api.notifications.store'), $this->errorData);

        $this->assertDatabaseMissing('notifications', array_merge($this->errorData, [
            'sender_id' => 40
        ]));

        $response->assertSessionHasErrors([
           'message',
           'recipient_id',
        ]);
    }

    public function testUpdateCorrectDataSender() {
        notification::factory()->create([
            'id' => 10,
            'sender_id' => 40
        ]);

        $response = $this->put(route('api.notifications.update', [
            'id' => 10
        ]), [
            'message' => $this->correctData['message']
        ]);

        $this->assertDatabaseHas('notifications', [
            'id' => 10,
            'message' => $this->correctData['message']
        ]);

        $response->assertSessionHasNoErrors()
            ->assertStatus(200)
            ->assertJsonStructure($this->expectedKeys);
    }

    public function testUpdateCorrectDataNotSender() {
        notification::factory()->create([
            'id' => 10,
            'sender_id' => 35
        ]);

        $response = $this->put(route('api.notifications.update', [
            'id' => 10
        ]), [
            'message' => $this->correctData['message']
        ]);

        $this->assertDatabaseMissing('notifications', $this->correctData);

        $response->assertStatus(403);
    }

    public function testUpdateErrorData() {
        $response = $this->put(route('api.notifications.update', [
            'id' => 1
        ]), [$this->errorData['message']]);

        $this->assertDatabaseMissing('notifications', $this->errorData);

        $response->assertSessionHasErrors([
           'message',
        ]);
    }

    public function testDeleteMyNotification() {
        notification::factory()->create([
            'id' => 15,
            'recipient_id' => 40
        ]);

        $response = $this->delete(route('api.notifications.destroy', [
            'id' => 15
        ]));

        $this->assertDatabaseMissing('notifications', [
            'id' => 15,
            'recipient_id' => 40
        ]);

        $response->assertStatus(302)
            ->assertRedirect(route('api.notifications.index'));
    }

    public function testDeleteNotMyNotification() {
        notification::factory()->create([
            'id' => 15,
            'recipient_id' => 39
        ]);

        $response = $this->delete(route('api.notifications.destroy', [
            'id' => 15
        ]));

        $this->assertDatabaseHas('notifications', [
            'id' => 15,
            'recipient_id' => 39
        ]);

        $response->assertStatus(403);
    }
}
