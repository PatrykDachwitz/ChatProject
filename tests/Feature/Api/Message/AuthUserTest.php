<?php
declare(strict_types=1);
namespace Tests\Feature\Api\Message;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class AuthUserTest extends DefaultParametr
{

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Sanctum::actingAs(User::factory()->create([
            'id' => 1
        ]), [
            '*'
        ]);
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */

    public function testIndexWithRecipientAndSender() {
        $response = $this->get($this->urlWithQuery(route('api.messages.index'), $this->queryAnyRecipientSender));
        $correctMessages = $this->verificationRecipientsMessages($response->json(), $this->queryAnyRecipientSender['filters']);

        $this->assertTrue($correctMessages);

        $response->assertStatus(200)
            ->assertJsonStructure([
                $this->expectedKeys
            ]);
    }

    public function testIndexNotRecipients() {
        $query = $this->queryAnyRecipientSender;
        $query['filters']['sender'] = 3;
        $response = $this->get($this->urlWithQuery(route('api.messages.index'), $query));

        $response->assertStatus(403);
    }

    public function testIndexWithFullDate() {
        $response = $this->get($this->urlWithQuery(route('api.messages.index'), $this->query));
        $correctMessages = $this->verificationRecipientsMessages($response->json(), $this->query['filters']);
        $correctDate = $this->verificationDateMessages($response->json(), $this->query['filters']['created_at']);
        $this->assertTrue($correctDate);
        $this->assertTrue($correctMessages);

        $response->assertStatus(200)
            ->assertJsonStructure([
                $this->expectedKeys
            ]);
    }

    public function testIndexWithOneDate() {
        $response = $this->get($this->urlWithQuery(route('api.messages.index'), $this->queryOneDay));
        $correctMessages = $this->verificationRecipientsMessages($response->json(), $this->queryOneDay['filters']);
        $correctDate = $this->verificationDateMessages($response->json(), $this->query['filters']['created_at']);
        $this->assertTrue($correctDate);
        $this->assertTrue($correctMessages);

        $response->assertStatus(200)
            ->assertJsonStructure([
                $this->expectedKeys
            ]);
    }

    public function testIndexNoParametr() {
        $response = $this->get($this->urlWithQuery(route('api.messages.index'), []));

        $response->assertStatus(302)
            ->assertSessionHasErrors([
                'filters.sender',
                'filters.recipient',
            ]);
    }

    public function testIndexErrorData() {
        $response = $this->get($this->urlWithQuery(route('api.messages.index'), $this->errorQuery));

        $response->assertStatus(302)
            ->assertSessionHasErrors([
                'filters.created_at.*.value',
                'filters.created_at.*.type',
                'filters.sender',
                'filters.recipient',
                'limit',
            ]);
    }


    public function testShowSenderUser()
    {
        $response = $this->get(route('api.messages.show', [
            'id' => 1
        ]));

        $response->assertStatus(200)
        ->assertJsonStructure($this->expectedKeys);
    }

    public function testShowRecipientUser()
    {
        $response = $this->get(route('api.messages.show', [
            'id' => 2
        ]));

        $response->assertStatus(200)
        ->assertJsonStructure($this->expectedKeys);
    }

    public function testShowUserNotRecipients()
    {
        $response = $this->get(route('api.messages.show', [
            'id' => 3
        ]));

        $response->assertStatus(403);
    }

    public function testCreate() {
        $response = $this->post(route('api.messages.store'), $this->correctData);

        $this->assertDatabaseHas('messages', $this->correctData);

        $response->assertStatus(200)
            ->assertJsonStructure($this->expectedKeys);
    }

    public function testCreateErrorData() {
        $response = $this->post(route('api.messages.store'), $this->errorData);

        $this->assertDatabaseMissing('messages', $this->errorData);

        $response->assertStatus(302)
            ->assertSessionHasErrors([
                    'readed',
                    'recipient_id',
                    'message'
            ]);
    }

    public function testCreateEmpty() {
        $response = $this->post(route('api.messages.store'));

        $response->assertStatus(302)
            ->assertSessionHasErrors([
                    'recipient_id',
                    'message'
            ]);
    }

    public function testUpdateSender() {
        $response = $this->put(route('api.messages.update', [
            'id' => 1
        ]), $this->updateData);

        $this->assertDatabaseHas('messages', array_merge($this->updateData, [
            'id' => 1
        ]));

        $response->assertStatus(200)
            ->assertJsonStructure($this->expectedKeys);
    }

    public function testUpdateRecipient() {
        $response = $this->put(route('api.messages.update', [
            'id' => 2
        ]), $this->updateData);

        $this->assertDatabaseMissing('messages', array_merge($this->updateData, [
            'id' => 2
        ]));

        $response->assertStatus(403);
    }

    public function testUpdateOtherRecipients() {
        $response = $this->put(route('api.messages.update', [
            'id' => 3
        ]), $this->updateData);

        $this->assertDatabaseMissing('messages', array_merge($this->updateData, [
            'id' => 3
        ]));

        $response->assertStatus(403);
    }

    public function testUpdateErrorData() {
        $response = $this->put(route('api.messages.update', [
            'id' => 1
        ]), $this->errorData);

        $this->assertDatabaseMissing('messages', [
            'readed' => $this->errorData['readed'],
            'id' => 3
        ]);

        $response->assertStatus(302)
        ->assertSessionHasErrors([
            'readed'
        ]);
    }

}
