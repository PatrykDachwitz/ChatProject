<?php

namespace Tests\Feature\Api\Message;

use App\Models\notification;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class MessageWithNotificationTest extends DefaultParametr
{
    private $message, $newMessage;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Sanctum::actingAs(User::factory()->create([
            'id' => 1
        ]));
        $this->message = "Lorem ipsum test, lorem ipsum";
        $this->newMessage = "Lorem ipsum test, 123, test";

        notification::factory()->create([
            'message' => $this->message,
            'sender_id' => 1,
            'recipient_id' => 2,
        ]);

        notification::factory()->create([
            'message' => $this->message,
            'sender_id' => 2,
            'recipient_id' => 3,
        ]);
        notification::factory()->create([
            'message' => $this->message,
            'sender_id' => 1,
            'recipient_id' => 3,
        ]);
        notification::factory()->create([
            'message' => $this->message,
            'sender_id' => 2,
            'recipient_id' => 1,
        ]);
    }

    private function otherNotificationsIsset() {
        $this->assertDatabaseHas('notifications', [
            'message' => $this->message,
            'sender_id' => 1,
            'recipient_id' => 3,
        ]);
        $this->assertDatabaseHas('notifications', [
            'message' => $this->message,
            'sender_id' => 2,
            'recipient_id' => 3,
        ]);
        $this->assertDatabaseHas('notifications', [
            'message' => $this->message,
            'sender_id' => 2,
            'recipient_id' => 1,
        ]);
    }
    public function testCreate()
    {
        $response = $this->post(route('api.messages.store'), $this->correctData);

        $this->assertDatabaseMissing('notifications', [
            'message' => $this->message,
            'sender_id' => 1,
            'recipient_id' => 2
        ]);
         $this->assertDatabaseHas('notifications', [
            'message' => $this->correctData['message'],
            'sender_id' => 1,
            'recipient_id' => 2
        ]);
        $this->otherNotificationsIsset();

        $response->assertStatus(200);
    }
    public function testUpdate()
    {
        $response = $this->put(route('api.messages.update', [
            'id' => 1
        ]), [
            'message' => $this->newMessage
        ]);

        $this->assertDatabaseMissing('notifications', [
            'message' => $this->message,
            'sender_id' => 1,
            'recipient_id' => 2
        ]);
        $this->assertDatabaseHas('notifications', [
            'message' => $this->newMessage,
            'sender_id' => 1,
            'recipient_id' => 2
        ]);
        $this->otherNotificationsIsset();

        $response->assertStatus(200);
    }


    public function testIndexDeleteNotification() {
        $response = $this->get($this->urlWithQuery(route('api.messages.index'), $this->queryAnyRecipientSender));

        $this->assertDatabaseMissing('notifications', [
            'message' => $this->message,
            'sender_id' => 1,
            'recipient_id' => 2,
        ]);
        $this->otherNotificationsIsset();
        $response->assertStatus(200);
    }
}
