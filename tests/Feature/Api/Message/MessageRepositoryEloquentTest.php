<?php
declare(strict_types=1);
namespace Tests\Feature\Api\Message;

use App\Models\Message;
use App\Models\User;
use App\Repository\Eloquent\MessageRepository;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class MessageRepositoryEloquentTest extends DefaultParametr
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testIndexWithRecipientAndSender()
    {
        $messages = $this->repository->get($this->queryAnyRecipientSender);

        $correctMessages = $this->verificationRecipientsMessages($messages, $this->queryAnyRecipientSender['filters']);
        $correctStructure = $this->comparisonKeyWithModel($messages[0], $this->expectedKeys);

        $this->assertTrue($correctMessages);
        $this->assertEquals($this->expectedKeys, $correctStructure);
    }


    public function testIndexWithFullDate()
    {
        $messages = $this->repository->get($this->query);

        $correctMessages = $this->verificationRecipientsMessages($messages, $this->query['filters']);
        $correctDate = $this->verificationDateMessages($messages, $this->query['filters']['created_at']);
        $correctStructure = $this->comparisonKeyWithModel($messages[0], $this->expectedKeys);

        $this->assertTrue($correctMessages);
        $this->assertTrue($correctDate);
        $this->assertEquals($this->expectedKeys, $correctStructure);
        $this->assertCount(2, $messages);
    }

    public function testIndexWithOneDate()
    {
        $messages = $this->repository->get($this->queryOneDay);

        $correctMessages = $this->verificationRecipientsMessages($messages, $this->queryOneDay['filters']);
        $correctStructure = $this->comparisonKeyWithModel($messages[0], $this->expectedKeys);
        $correctDate = $this->verificationDateMessages($messages, $this->query['filters']['created_at']);

        $this->assertTrue($correctMessages);
        $this->assertTrue($correctDate);
        $this->assertEquals($this->expectedKeys, $correctStructure);
        $this->assertCount(1, $messages);
    }

    public function testIndexNoParametr()
    {
        $messages = $this->repository->get([]);

        $this->assertEmpty($messages);
        $this->assertCount(0, $messages);
    }

    public function testShow() {
        $message = $this->repository->find(1);

        $correctStructure = $this->comparisonKeyWithModel($message, $this->expectedKeys);
        $this->assertEquals($this->expectedKeys, $correctStructure);
    }


    public function testCreate() {
        $message = $this->repository->create($this->correctData);

        $correctStructure = $this->comparisonKeyWithModel($message, $this->expectedKeys);

        $this->assertDatabaseHas('messages', $this->correctData);
        $this->assertEquals($this->expectedKeys, $correctStructure);
    }

    public function testUpdate() {
        $message = $this->repository->update($this->correctData, 3);

        $correctStructure = $this->comparisonKeyWithModel($message, $this->expectedKeys);

        $this->assertDatabaseHas('messages', $this->correctData);
        $this->assertEquals($this->expectedKeys, $correctStructure);
    }

}
