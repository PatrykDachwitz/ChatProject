<?php
declare(strict_types=1);
namespace Tests\Feature\Api\Message;

use App\Models\Message;
use App\Models\User;
use App\Repository\Eloquent\MessageRepository;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use PhpParser\Node\Expr\Cast\Object_;
use Tests\TestCase;

class DefaultParametr extends TestCase
{
    protected $correctData, $errorData, $expectedKeys, $updateData, $query, $queryOneDay, $queryAnyRecipientSender, $errorQuery;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->queryAnyRecipientSender = [
            'filters' => [
                'sender' => 1,
                'recipient' => 2
            ],
            'limit' => 15
        ];

        $this->query = [
            'filters' => [
                'created_at' => [
                    [
                        'value' => '2022-12-03 00:00:00',
                        'type' => '>='
                    ],
                    [
                        'value' => '2022-12-05 23:59:59',
                        'type' => '<='
                    ]
                ],
                'sender' => 1,
                'recipient' => 2
            ],
            'limit' => 15
        ];
        $this->errorQuery = [
            'filters' => [
                'created_at' => [
                    [
                        'value' => 'test',
                        'type' => 'test'
                    ],
                    [
                        'value' => 'test',
                        'type' => 'test'
                    ]
                ],
                'sender' => "test",
                'recipient' => "test"
            ],
            'limit' => "test"
        ];

        $this->queryOneDay = [
            'filters' => [
                'created_at' => [
                    [
                        'value' => '2022-12-03 13:00:12',
                        'type' => '='
                    ]
                ],
                'sender' => 2,
                'recipient' => 1
            ],
            'limit' => 15
        ];

        Message::factory()->create([
            'sender_id' => 3,
            'recipient_id' => 4,
            'id' => 3,
            'created_at' => '2022-12-03 13:00:12'
        ]);

        Message::factory()->create([
            'sender_id' => 2,
            'recipient_id' => 1,
            'id' => 2,
            'created_at' => '2022-12-03 13:00:12'
        ]);

        Message::factory()->create([
            'sender_id' => 2,
            'recipient_id' => 1,
            'created_at' => '2022-12-12 13:00:12'
        ]);
        Message::factory()->create([
            'sender_id' => 1,
            'recipient_id' => 2,
            'created_at' => '2022-12-01 13:00:12'
        ]);

        Message::factory()->create([
            'sender_id' => 2,
            'recipient_id' => 1,
            'created_at' => '2022-12-31 13:00:12'
        ]);
        Message::factory()->create([
            'sender_id' => 1,
            'recipient_id' => 2,
            'created_at' => '2022-01-01 13:00:12'
        ]);



        Message::factory()->create([
            'sender_id' => 1,
            'recipient_id' => 4,
            'created_at' => '2022-12-03 13:00:12'
        ]);
        Message::factory()->create([
            'sender_id' => 2,
            'recipient_id' => 4,
            'created_at' => '2022-12-05 13:00:12'
        ]);
        Message::factory()->create([
            'sender_id' => 5,
            'recipient_id' => 1,
            'created_at' => '2022-12-04 13:00:12'
        ]);
        Message::factory()->create([
            'sender_id' => 5,
            'recipient_id' => 2,
            'created_at' => '2022-12-03 13:00:12'
        ]);

        $this->repository = new MessageRepository(Message::factory()->create([
            'sender_id' => 1,
            'recipient_id' => 2,
            'id' => 1,
            'created_at' => '2022-12-04 14:00:00'
        ]));
        $this->correctData = [
            'readed' => true,
            'message' => "Lorem ipsum",
            'sender_id' => 1,
            'recipient_id' => 2
        ];

        $this->updateData = [
            'readed' => true,
            'message' => "Lorem ipsum, lorem ipsum Lorem. ipsum",
        ];

        $this->errorData = [
            'readed' => "ipsum",
            'sender_id' => "ipsum",
            'recipient_id' => "ipsum"
        ];

        $this->expectedKeys = [
            'readed',
            'message',
            'sender_id',
            'recipient_id'
        ];
    }
    protected function urlWithQuery(string $url, array $data) {
        $query = http_build_query($data);
        return "{$url}?{$query}";
    }

    public function compariseDateWithSearchDate(string $date,string $searchDate, string $type = "==") {
        $date = strtotime($date);
        $searchDate = strtotime($searchDate);

        switch ($type) {
            case "<=":
                return $date <= $searchDate;
                break;
            case "=":
                return $searchDate == $date;
                break;
            case ">=":
                return $date >= $searchDate;
                break;
            case ">":
                return $date > $searchDate;
                break;
            case "<":
                return $date < $searchDate;
                break;
        }
    }

    public function validSearchDates(string $date,array $searchDate) {
        foreach ($searchDate ?? [] as $item) {
            if (!$this->compariseDateWithSearchDate($date, $item['value'], $item['type'] ?? "==")) {
                return false;
            }
        }
        return true;
    }

    private function getTime($message) {

        if(is_array($message)) {
            return $message['created_at'];
        } elseif ($message->created_at instanceof Carbon) {
            return $message->created_at->format("Y-m-d H:i:s");
        } else {
            throw new \Exception('Error type value');
        }
    }
    public function verificationDateMessages($messages, $date) {
        foreach ($messages ?? [] as $message) {
            if (!$this->validSearchDates($this->getTime($message), $date)) return false;
        }
        return true;
    }

    public function verificationRecipientsMessages($messages, array $recipients) {

        foreach ($messages ?? [] as $message) {
            if (
                $message['sender_id'] !== $recipients['sender'] & $message['recipient_id'] !== $recipients['recipient']
                &
                $message['sender_id'] !== $recipients['recipient'] & $message['recipient_id'] !== $recipients['sender']
            ) {
                return false;
            }
        }

        return true;
    }
}
